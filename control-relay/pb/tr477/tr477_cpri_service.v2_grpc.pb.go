// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: tr477_cpri_service.v2.proto

package tr477

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CpriHelloClient is the client API for CpriHello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpriHelloClient interface {
	HelloCpri(ctx context.Context, in *HelloCpriRequest, opts ...grpc.CallOption) (*HelloCpriResponse, error)
}

type cpriHelloClient struct {
	cc grpc.ClientConnInterface
}

func NewCpriHelloClient(cc grpc.ClientConnInterface) CpriHelloClient {
	return &cpriHelloClient{cc}
}

func (c *cpriHelloClient) HelloCpri(ctx context.Context, in *HelloCpriRequest, opts ...grpc.CallOption) (*HelloCpriResponse, error) {
	out := new(HelloCpriResponse)
	err := c.cc.Invoke(ctx, "/tr477_cpri_service.v2.CpriHello/HelloCpri", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpriHelloServer is the server API for CpriHello service.
// All implementations must embed UnimplementedCpriHelloServer
// for forward compatibility
type CpriHelloServer interface {
	HelloCpri(context.Context, *HelloCpriRequest) (*HelloCpriResponse, error)
	mustEmbedUnimplementedCpriHelloServer()
}

// UnimplementedCpriHelloServer must be embedded to have forward compatible implementations.
type UnimplementedCpriHelloServer struct {
}

func (UnimplementedCpriHelloServer) HelloCpri(context.Context, *HelloCpriRequest) (*HelloCpriResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloCpri not implemented")
}
func (UnimplementedCpriHelloServer) mustEmbedUnimplementedCpriHelloServer() {}

// UnsafeCpriHelloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpriHelloServer will
// result in compilation errors.
type UnsafeCpriHelloServer interface {
	mustEmbedUnimplementedCpriHelloServer()
}

func RegisterCpriHelloServer(s grpc.ServiceRegistrar, srv CpriHelloServer) {
	s.RegisterService(&CpriHello_ServiceDesc, srv)
}

func _CpriHello_HelloCpri_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloCpriRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpriHelloServer).HelloCpri(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tr477_cpri_service.v2.CpriHello/HelloCpri",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpriHelloServer).HelloCpri(ctx, req.(*HelloCpriRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CpriHello_ServiceDesc is the grpc.ServiceDesc for CpriHello service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CpriHello_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tr477_cpri_service.v2.CpriHello",
	HandlerType: (*CpriHelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloCpri",
			Handler:    _CpriHello_HelloCpri_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tr477_cpri_service.v2.proto",
}

// CpriMessageClient is the client API for CpriMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpriMessageClient interface {
	TransferCpri(ctx context.Context, opts ...grpc.CallOption) (CpriMessage_TransferCpriClient, error)
}

type cpriMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewCpriMessageClient(cc grpc.ClientConnInterface) CpriMessageClient {
	return &cpriMessageClient{cc}
}

func (c *cpriMessageClient) TransferCpri(ctx context.Context, opts ...grpc.CallOption) (CpriMessage_TransferCpriClient, error) {
	stream, err := c.cc.NewStream(ctx, &CpriMessage_ServiceDesc.Streams[0], "/tr477_cpri_service.v2.CpriMessage/transferCpri", opts...)
	if err != nil {
		return nil, err
	}
	x := &cpriMessageTransferCpriClient{stream}
	return x, nil
}

type CpriMessage_TransferCpriClient interface {
	Send(*CpriMsg) error
	Recv() (*CpriMsg, error)
	grpc.ClientStream
}

type cpriMessageTransferCpriClient struct {
	grpc.ClientStream
}

func (x *cpriMessageTransferCpriClient) Send(m *CpriMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cpriMessageTransferCpriClient) Recv() (*CpriMsg, error) {
	m := new(CpriMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CpriMessageServer is the server API for CpriMessage service.
// All implementations must embed UnimplementedCpriMessageServer
// for forward compatibility
type CpriMessageServer interface {
	TransferCpri(CpriMessage_TransferCpriServer) error
	mustEmbedUnimplementedCpriMessageServer()
}

// UnimplementedCpriMessageServer must be embedded to have forward compatible implementations.
type UnimplementedCpriMessageServer struct {
}

func (UnimplementedCpriMessageServer) TransferCpri(CpriMessage_TransferCpriServer) error {
	return status.Errorf(codes.Unimplemented, "method TransferCpri not implemented")
}
func (UnimplementedCpriMessageServer) mustEmbedUnimplementedCpriMessageServer() {}

// UnsafeCpriMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpriMessageServer will
// result in compilation errors.
type UnsafeCpriMessageServer interface {
	mustEmbedUnimplementedCpriMessageServer()
}

func RegisterCpriMessageServer(s grpc.ServiceRegistrar, srv CpriMessageServer) {
	s.RegisterService(&CpriMessage_ServiceDesc, srv)
}

func _CpriMessage_TransferCpri_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CpriMessageServer).TransferCpri(&cpriMessageTransferCpriServer{stream})
}

type CpriMessage_TransferCpriServer interface {
	Send(*CpriMsg) error
	Recv() (*CpriMsg, error)
	grpc.ServerStream
}

type cpriMessageTransferCpriServer struct {
	grpc.ServerStream
}

func (x *cpriMessageTransferCpriServer) Send(m *CpriMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cpriMessageTransferCpriServer) Recv() (*CpriMsg, error) {
	m := new(CpriMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CpriMessage_ServiceDesc is the grpc.ServiceDesc for CpriMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CpriMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tr477_cpri_service.v2.CpriMessage",
	HandlerType: (*CpriMessageServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "transferCpri",
			Handler:       _CpriMessage_TransferCpri_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tr477_cpri_service.v2.proto",
}
