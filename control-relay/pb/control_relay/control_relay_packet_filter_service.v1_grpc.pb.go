// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: control_relay_packet_filter_service.v1.proto

package control_relay

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlRelayPacketFilterServiceClient is the client API for ControlRelayPacketFilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlRelayPacketFilterServiceClient interface {
	SetControlRelayPacketFilter(ctx context.Context, in *ControlRelayPacketFilterList, opts ...grpc.CallOption) (*ControlRelayPacketFilterResponse, error)
	ClearControlRelayPacketFilter(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ControlRelayPacketFilterResponse, error)
}

type controlRelayPacketFilterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewControlRelayPacketFilterServiceClient(cc grpc.ClientConnInterface) ControlRelayPacketFilterServiceClient {
	return &controlRelayPacketFilterServiceClient{cc}
}

func (c *controlRelayPacketFilterServiceClient) SetControlRelayPacketFilter(ctx context.Context, in *ControlRelayPacketFilterList, opts ...grpc.CallOption) (*ControlRelayPacketFilterResponse, error) {
	out := new(ControlRelayPacketFilterResponse)
	err := c.cc.Invoke(ctx, "/control_relay_packet_filter_service.v1.ControlRelayPacketFilterService/SetControlRelayPacketFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlRelayPacketFilterServiceClient) ClearControlRelayPacketFilter(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ControlRelayPacketFilterResponse, error) {
	out := new(ControlRelayPacketFilterResponse)
	err := c.cc.Invoke(ctx, "/control_relay_packet_filter_service.v1.ControlRelayPacketFilterService/ClearControlRelayPacketFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlRelayPacketFilterServiceServer is the server API for ControlRelayPacketFilterService service.
// All implementations must embed UnimplementedControlRelayPacketFilterServiceServer
// for forward compatibility
type ControlRelayPacketFilterServiceServer interface {
	SetControlRelayPacketFilter(context.Context, *ControlRelayPacketFilterList) (*ControlRelayPacketFilterResponse, error)
	ClearControlRelayPacketFilter(context.Context, *empty.Empty) (*ControlRelayPacketFilterResponse, error)
	mustEmbedUnimplementedControlRelayPacketFilterServiceServer()
}

// UnimplementedControlRelayPacketFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedControlRelayPacketFilterServiceServer struct {
}

func (UnimplementedControlRelayPacketFilterServiceServer) SetControlRelayPacketFilter(context.Context, *ControlRelayPacketFilterList) (*ControlRelayPacketFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetControlRelayPacketFilter not implemented")
}
func (UnimplementedControlRelayPacketFilterServiceServer) ClearControlRelayPacketFilter(context.Context, *empty.Empty) (*ControlRelayPacketFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearControlRelayPacketFilter not implemented")
}
func (UnimplementedControlRelayPacketFilterServiceServer) mustEmbedUnimplementedControlRelayPacketFilterServiceServer() {
}

// UnsafeControlRelayPacketFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlRelayPacketFilterServiceServer will
// result in compilation errors.
type UnsafeControlRelayPacketFilterServiceServer interface {
	mustEmbedUnimplementedControlRelayPacketFilterServiceServer()
}

func RegisterControlRelayPacketFilterServiceServer(s grpc.ServiceRegistrar, srv ControlRelayPacketFilterServiceServer) {
	s.RegisterService(&ControlRelayPacketFilterService_ServiceDesc, srv)
}

func _ControlRelayPacketFilterService_SetControlRelayPacketFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRelayPacketFilterList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlRelayPacketFilterServiceServer).SetControlRelayPacketFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_relay_packet_filter_service.v1.ControlRelayPacketFilterService/SetControlRelayPacketFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlRelayPacketFilterServiceServer).SetControlRelayPacketFilter(ctx, req.(*ControlRelayPacketFilterList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlRelayPacketFilterService_ClearControlRelayPacketFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlRelayPacketFilterServiceServer).ClearControlRelayPacketFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_relay_packet_filter_service.v1.ControlRelayPacketFilterService/ClearControlRelayPacketFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlRelayPacketFilterServiceServer).ClearControlRelayPacketFilter(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlRelayPacketFilterService_ServiceDesc is the grpc.ServiceDesc for ControlRelayPacketFilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlRelayPacketFilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "control_relay_packet_filter_service.v1.ControlRelayPacketFilterService",
	HandlerType: (*ControlRelayPacketFilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetControlRelayPacketFilter",
			Handler:    _ControlRelayPacketFilterService_SetControlRelayPacketFilter_Handler,
		},
		{
			MethodName: "ClearControlRelayPacketFilter",
			Handler:    _ControlRelayPacketFilterService_ClearControlRelayPacketFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_relay_packet_filter_service.v1.proto",
}
