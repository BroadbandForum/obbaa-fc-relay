// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: tr477_cpri_service.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_tr477_cpri_service_proto protoreflect.FileDescriptor

var file_tr477_cpri_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x74, 0x72, 0x34, 0x37, 0x37, 0x5f, 0x63, 0x70, 0x72, 0x69, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x74, 0x72, 0x34, 0x37,
	0x37, 0x5f, 0x63, 0x70, 0x72, 0x69, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x18, 0x74, 0x72, 0x34, 0x37, 0x37, 0x5f, 0x63, 0x70, 0x72, 0x69, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x9c, 0x01, 0x0a, 0x0b, 0x43, 0x70, 0x72,
	0x69, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x70, 0x72, 0x69, 0x52, 0x78, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1e, 0x2e, 0x74, 0x72, 0x34, 0x37, 0x37, 0x5f, 0x63, 0x70, 0x72, 0x69,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x72, 0x69,
	0x4d, 0x73, 0x67, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x06, 0x43, 0x70, 0x72, 0x69, 0x54, 0x78, 0x12,
	0x1e, 0x2e, 0x74, 0x72, 0x34, 0x37, 0x37, 0x5f, 0x63, 0x70, 0x72, 0x69, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x70, 0x72, 0x69, 0x4d, 0x73, 0x67, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_tr477_cpri_service_proto_goTypes = []interface{}{
	(*empty.Empty)(nil), // 0: google.protobuf.Empty
	(*CpriMsg)(nil),     // 1: tr477_cpri_message.v1.CpriMsg
}
var file_tr477_cpri_service_proto_depIdxs = []int32{
	0, // 0: tr477_cpri_message.v1.CpriMessage.ListenForCpriRx:input_type -> google.protobuf.Empty
	1, // 1: tr477_cpri_message.v1.CpriMessage.CpriTx:input_type -> tr477_cpri_message.v1.CpriMsg
	1, // 2: tr477_cpri_message.v1.CpriMessage.ListenForCpriRx:output_type -> tr477_cpri_message.v1.CpriMsg
	0, // 3: tr477_cpri_message.v1.CpriMessage.CpriTx:output_type -> google.protobuf.Empty
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tr477_cpri_service_proto_init() }
func file_tr477_cpri_service_proto_init() {
	if File_tr477_cpri_service_proto != nil {
		return
	}
	file_tr477_cpri_message_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tr477_cpri_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tr477_cpri_service_proto_goTypes,
		DependencyIndexes: file_tr477_cpri_service_proto_depIdxs,
	}.Build()
	File_tr477_cpri_service_proto = out.File
	file_tr477_cpri_service_proto_rawDesc = nil
	file_tr477_cpri_service_proto_goTypes = nil
	file_tr477_cpri_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CpriMessageClient is the client API for CpriMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CpriMessageClient interface {
	ListenForCpriRx(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CpriMessage_ListenForCpriRxClient, error)
	CpriTx(ctx context.Context, in *CpriMsg, opts ...grpc.CallOption) (*empty.Empty, error)
}

type cpriMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewCpriMessageClient(cc grpc.ClientConnInterface) CpriMessageClient {
	return &cpriMessageClient{cc}
}

func (c *cpriMessageClient) ListenForCpriRx(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CpriMessage_ListenForCpriRxClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CpriMessage_serviceDesc.Streams[0], "/tr477_cpri_message.v1.CpriMessage/ListenForCpriRx", opts...)
	if err != nil {
		return nil, err
	}
	x := &cpriMessageListenForCpriRxClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CpriMessage_ListenForCpriRxClient interface {
	Recv() (*CpriMsg, error)
	grpc.ClientStream
}

type cpriMessageListenForCpriRxClient struct {
	grpc.ClientStream
}

func (x *cpriMessageListenForCpriRxClient) Recv() (*CpriMsg, error) {
	m := new(CpriMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cpriMessageClient) CpriTx(ctx context.Context, in *CpriMsg, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/tr477_cpri_message.v1.CpriMessage/CpriTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpriMessageServer is the server API for CpriMessage service.
type CpriMessageServer interface {
	ListenForCpriRx(*empty.Empty, CpriMessage_ListenForCpriRxServer) error
	CpriTx(context.Context, *CpriMsg) (*empty.Empty, error)
}

// UnimplementedCpriMessageServer can be embedded to have forward compatible implementations.
type UnimplementedCpriMessageServer struct {
}

func (*UnimplementedCpriMessageServer) ListenForCpriRx(*empty.Empty, CpriMessage_ListenForCpriRxServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenForCpriRx not implemented")
}
func (*UnimplementedCpriMessageServer) CpriTx(context.Context, *CpriMsg) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CpriTx not implemented")
}

func RegisterCpriMessageServer(s *grpc.Server, srv CpriMessageServer) {
	s.RegisterService(&_CpriMessage_serviceDesc, srv)
}

func _CpriMessage_ListenForCpriRx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CpriMessageServer).ListenForCpriRx(m, &cpriMessageListenForCpriRxServer{stream})
}

type CpriMessage_ListenForCpriRxServer interface {
	Send(*CpriMsg) error
	grpc.ServerStream
}

type cpriMessageListenForCpriRxServer struct {
	grpc.ServerStream
}

func (x *cpriMessageListenForCpriRxServer) Send(m *CpriMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _CpriMessage_CpriTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CpriMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpriMessageServer).CpriTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tr477_cpri_message.v1.CpriMessage/CpriTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpriMessageServer).CpriTx(ctx, req.(*CpriMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _CpriMessage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tr477_cpri_message.v1.CpriMessage",
	HandlerType: (*CpriMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CpriTx",
			Handler:    _CpriMessage_CpriTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenForCpriRx",
			Handler:       _CpriMessage_ListenForCpriRx_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tr477_cpri_service.proto",
}
